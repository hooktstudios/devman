#!/usr/bin/python -tt
# vim: tabstop=2 shiftwidth=2 softtabstop=2 expandtab

## TODO: handle cases for multiple usages
# - Create setup.py
# - manage standard repositories (used all the time)
# - manage libraries (owned by kronostechnologies-build@github)
# - manage mass update
# - manage mass branch switch
import subprocess
import popen2
from git import Repo
from git.util import RemoteProgress
from git import GitCommandError
from git import NoSuchPathError
from git import InvalidGitRepositoryError

from argparse import ArgumentParser
from argparse import SUPPRESS
from ConfigParser import SafeConfigParser
import yaml

# to check operating system now running.
import platform
import sys

# to figure out in which folder we are running
import os
import pprint as pp

######
debug = False
install_dir = os.path.dirname(os.path.realpath(__file__))
######

class DisProgress(RemoteProgress):
  if debug:
    def line_dropped(self, line):
      print('{0}'.format(line))
    def update(self, op_code, cur_count, max_count=None, message=''):
      print('{0} {1}/{2} {3}'.format(op_code, cur_count, max_count, message))

def flatten(lst):
  return sum( ([x] if not isinstance(x, list) else flatten(x)
         for x in lst), [] )

class DevMan:

  def __init__(self):
    self.config = self.loadConfig()
    # extract useful information from arguments
    self.args = self.argument_parser()
    self.command = self.args.cmd
    self.groups = flatten(self.args.groups)
    
    # TODO: set default group from config
    if self.groups == []:
      print 'Using default group as no argument has been given'
      self.groups.append('dev')
    
    target_os = platform.system()
    
    # TODO: use config
    if target_os == 'Linux':
      self.repo_clone_path = self.config['default']['repo_clone_path']
      self.git_url = self.config['default']['git_baseurl']
      self.git_binary  = self.sh("which git")
      self.git_login = self.sh("ssh git@github.com")
    elif target_os == 'Windows':
      self.repo_clone_path = self.config['windows']['repo_clone_path']
      self.git_url = self.config['windows']['git_baseurl']
      self.git_binary  = self.sh("c:/vagrant/embedded/mingw/bin/which.exe git")
      self.git_login = self.sh("ssh git@github.com")
    elif target_os == 'Darwin':
      self.repo_clone_path = self.config['default']['repo_clone_path']
      self.git_url = self.config['default']['git_baseurl']
      self.git_binary  = self.sh("which git")
      self.git_login = self.sh("ssh git@github.com")
    elif target_os == 'CYGWIN_NT-6.1':
      self.repo_clone_path = self.config['cygwin']['repo_clone_path']
      self.git_url = self.config['default']['git_baseurl']
      self.git_binary  = self.sh("which git")
      self.git_login = self.sh("ssh git@github.com")
    else: 
      print 'OS not supported yet'
      print target_os
      exit(1)
    
    self.repo_conf_file = self.config['default']['repo_conf_file']
    # load repos definition
    self.repos = self.loadRepos()
    
    # set debug/progress mode
    debug = False

    # check if github is configured
    if self.git_binary.find("git") == -1:
      print "Please install git before you proceed any further."
      exit(1)
    # create install path if it doesn't already exist
    if not os.path.isdir(self.repo_clone_path):
      self.sh("mkdir -p " + self.repo_clone_path)
  
  def argument_parser(self):
    # arguments definitions 
    groups_args = dict(metavar='RepoGroup', action='append', type=str, nargs='*', help='a group of git repos to work on')
    
    parser = ArgumentParser(description='DevMan')
    
    subparsers = parser.add_subparsers(title='cmd', description="Command to perform on all repositories.", dest='cmd')
    
    # devman clone
    sp_clone = subparsers.add_parser('clone', description='git clone on selected repo-groups')
    sp_clone.add_argument('groups', **groups_args)

    # devman co
    sp_co= subparsers.add_parser('co', description='git checkout -b branch origin/branch on selected repo-groups' )
    sp_co.add_argument('-b', '--branch', help="Pass the --branch option when checking out branches", action="store", dest="branch")
    sp_co.add_argument('groups', **groups_args)
    
    # devman list 
    sp_list = subparsers.add_parser('list', description='List configured repo-groups')
    sp_list.add_argument('groups', **groups_args)
    
    # devman fetch
    sp_fetch = subparsers.add_parser('fetch')
    sp_fetch.add_argument('-p', '--prune', help="Pass the --prune option when doing git fetch", action="store_true", dest="prune")
    sp_fetch.add_argument('groups', **groups_args)
    
    # devman ff
    sp_ff= subparsers.add_parser('ff', description='git pull --ff-only on selected repo-groups' )
    sp_ff.add_argument('groups', **groups_args)

    
    return parser.parse_args()
  
  ##
  # Load default configurations from devman.conf ini file
  ##
  def loadConfig(self):
    parser = SafeConfigParser()
    parser.read('%s/devman.conf' % install_dir)
    config = {}
    for section_name in parser.sections():
      section_confs = {}
      for name, value in parser.items(section_name):
        section_confs[name] = value
      config[section_name] = section_confs
    return config
  ##
  # return repos from group
  ## 
  def getRepos(self):
    all_repos = {}
    for g in self.groups:
      all_repos[g] = self.repos[g]
    return all_repos

  def iterRepos(self, create=False):
    for group, repo_definition in self.getRepos().items():
      for repo_name, repo_url in repo_definition.items():
        repo_path = self.repo_clone_path + repo_name
        try:
          repo = Repo(repo_path)
          if repo.bare == True:
            print "Cannot process bare repo: %s" % repo_name 
            pass
          elif repo.is_dirty() :
            print "Cannot process dirty repo: %s" % repo_name
            pass
          else:
            yield repo_name, repo_path, repo_url, repo
        except InvalidGitRepositoryError:
          print "Error: Repository " + repo_name + " is not a git repo. Remove folder and try again."
          exit(1)
        except NoSuchPathError:
          if create:
            print "Cloning " + repo_name
            this_repo = Repo.clone_from(repo_url, repo_path , progress = DisProgress())
            for submodule in this_repo.submodules:
              print "Now Initializing submodule:" + str(submodule)
              submodule.update(progress = DisProgress())
          else:
            print 'Error: Repository %s does not exist. Please use git clone first.' % repo_name
            exit(1)

  ##
  # Load git repos definition from yaml files
  # Add configuration layer from default config
  ##
  def loadRepos(self):
    # load yaml file
    repo_conf = install_dir + '/' + self.repo_conf_file
    stream = open(repo_conf, 'r')
    self.repo_list = yaml.safe_load(stream)

    # load only configured groups from config file
    repos = {}
    for group in self.groups:
      if group in self.repo_list:
        updated_repos = {}
        for repo_name, repo_url in self.repo_list[group].items():
          remote_url = self.git_url + repo_url
          updated_repos[repo_name] = remote_url
        repos[group] = updated_repos
      else:
        raise Exception("Error: could not find group {0} in {1}.".format(group, 'repos.yaml'))
    return repos

  def git_clone(self, path, url):
    try:
      print "Cloning: " + name
      this_repo = Repo.clone_from(url, path , progress = DisProgress())
      for submodule in this_repo.submodules:
        print "Initializing submodule:" + str(submodule)
        submodule.update(progress = DisProgress())
    except GitCommandError:
      raise Exception("Error: Could not clone repo. %s" % str(e))
  ##
  # repo actions
  ##
  def clone(self):
    for name, path, url, repo in self.iterRepos(create=True):
      pass

  # checkout branch
  def co(self, branch):
    for name, path, url, repo in self.iterRepos():
      remote_branches = [remote.strip() for remote in repo.git.branch(r=True).splitlines()]
      local_branches = repo.branches
      current_branch = str(repo.active_branch)
      remote_branch = "origin/"+branch 
      
      # this remote branch exists 
      if remote_branch in remote_branches:
        # we are not already on this branch
        if branch != current_branch:
          print "Checking out {0} on {1}".format(branch, name)
          if branch in local_branches:
            repo.git.checkout(branch)
          else:
            repo.git.checkout(remote_branch, b=branch)
        else:
          pass

  def ff(self):
    for name, path, url, repo in self.iterRepos():
      print "Fast-forward from origin: {0}".format(name)
      cur_branch = repo.head.reference.name
      o = repo.remotes.origin
      o.pull(cur_branch, ff_only=True, progress = DisProgress())

  def fetch(self, prune):
    for name, path, url, repo in self.iterRepos():
      try:
        if prune:
          print "Fetch prune: {0}".format(name)
        else:
          print "Fetch: {0} ".format(name)
        repo.remotes.origin.fetch(prune=prune, progress = DisProgress())
      except AssertionError as e:
        if prune:
          print "Catch assertion error probably due to pruned branch"
        else:
          raise e

  def list(self):
    print '------------------------------------------------'
    print '| Available                                    |'
    print '------------------------------------------------'
    pp.pprint(self.repo_list)
    print '------------------------------------------------'
    print '| Now                                          |'
    print '------------------------------------------------'
    pp.pprint(self.getRepos())

  def run(self):
    if self.command == 'list':
      self.list()
    elif self.command == 'clone':
      self.clone()
    elif self.command == 'fetch':
      self.fetch(self.args.prune)
    elif self.command == 'ff':
      self.ff()
    elif self.command == 'co':
      self.co(self.args.branch)
    else:
      print 'Error command not found.'
      exit(1)

  # Utils
  def sh(self, cmd):
    try: 
      output = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
    except Exception, e:
      output = str(e.output)
    return output


def main():
  devman = DevMan()
  devman.run()

if __name__ == "__main__":
  main()
